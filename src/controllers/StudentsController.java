package controllers;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import persistence.StudentDataAccess;
import validator.StudentValidator;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import entity.Student;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;

public class StudentsController implements Initializable {

	private Stage stage;
	private Scene scene;
	private Parent root;

	@FXML
	private TextField tfStudentId;
	@FXML
	private TextField tfName;
	@FXML
	private TextField tfEmail;
	@FXML
	private TextField tfGraduationYear;
	@FXML
	private Button btnClear;
	@FXML
	private Button btnAdd;
	@FXML
	private Button btnSearch;
	@FXML
	private Button btnDelete;
	@FXML
	private Button btnUpdate;
	@FXML
	private TableView tvStudents;
	@FXML
	private TableColumn<Student, Integer> colStudentId;
	@FXML
	private TableColumn<Student, String> colStudentName;
	@FXML
	private TableColumn<Student, String> colStudentEmail;
	@FXML
	private TableColumn<Student, Integer> colGraduationYear;

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		showAllStudents();
	}

	// Event Listener on Button[#btnAdd].onAction
	@FXML
	public void handleButtonAction(ActionEvent event) {
		// TODO Autogenerated

		if (event.getSource() == btnClear) {
			clearFields();
		} else if (event.getSource() == btnAdd) {
			addStudent();
		} else if (event.getSource() == btnSearch) {
			searchStudent();
		} else if (event.getSource() == btnUpdate) {
			updateStudent();
		} else if (event.getSource() == btnDelete) {
			deleteStudent();
		}
	}

	private void showAllStudents() {
		ObservableList<Student> students = StudentDataAccess.loadAllStudents();

		colStudentId.setCellValueFactory(new PropertyValueFactory<Student, Integer>("studentId"));
		colStudentName.setCellValueFactory(new PropertyValueFactory<Student, String>("name"));
		colStudentEmail.setCellValueFactory(new PropertyValueFactory<Student, String>("email"));
		colGraduationYear.setCellValueFactory(new PropertyValueFactory<Student, Integer>("graduationYear"));

		if(students != null)
		{
			tvStudents.setItems(students);
		}
	}

	private void clearFields() {
		tfStudentId.clear();
		tfName.clear();
		tfGraduationYear.clear();
		tfEmail.clear();
		tfGraduationYear.clear();

	}

	private void addStudent() {
		String name = tfName.getText();
		String year = tfGraduationYear.getText();
		String email = tfEmail.getText();
		
		Alert frontendAlert = StudentValidator.frontendLoanValidatorForCreatingAndUpdatingStudent(name, email, year, null);
		
		if(frontendAlert == null)
		{
			String result = StudentDataAccess.createStudent(name, Integer.valueOf(year), email);
			Alert backendAlert = StudentValidator.backendStudentValidator(result);
			if(backendAlert.getAlertType() == AlertType.CONFIRMATION)
			{
				showAllStudents();
				clearFields();
			}
			backendAlert.showAndWait();
		}
		else
		{
			frontendAlert.showAndWait();
		}
	}

	private void searchStudent() {
		String studentId = tfStudentId.getText();
		
		Alert frontendAlert = StudentValidator.frontendLoanValidatorForSearchingAndDeletingStudent(studentId);
		
		if(frontendAlert == null)
		{
			Student student = StudentDataAccess.loadStudent(Integer.valueOf(studentId));
			Alert backendAlert = StudentValidator.backendLoanValidatorForStudentSearch(student);
			if(backendAlert == null)
			{
				tfName.setText(student.getName());
				tfGraduationYear.setText(student.getGraduationYear().toString());
				tfEmail.setText(student.getEmail());
			}
			else
			{
				backendAlert.showAndWait();
			}
		}
		else
		{
			frontendAlert.showAndWait();
		}
	}

	private void updateStudent() {
		
		String studentId = tfStudentId.getText();
		String name = tfName.getText();
		String year = tfGraduationYear.getText();
		String email = tfEmail.getText();
		
		Alert frontendAlert = StudentValidator.frontendLoanValidatorForCreatingAndUpdatingStudent(name, email, year, studentId);
		
		if(frontendAlert == null)
		{
			String result = StudentDataAccess.updateStudent(Integer.valueOf(studentId), name, Integer.valueOf(year), email);
			Alert backendAlert = StudentValidator.backendStudentValidator(result);
			if(backendAlert.getAlertType() == AlertType.CONFIRMATION)
			{
				showAllStudents();
				clearFields();
			}
			backendAlert.showAndWait();
		}
		else
		{
			frontendAlert.showAndWait();
		}
	}

	private void deleteStudent() {
		String studentId = tfStudentId.getText();
		
		Alert frontendAlert = StudentValidator.frontendLoanValidatorForSearchingAndDeletingStudent(studentId);
		
		if(frontendAlert == null)
		{
			String result = StudentDataAccess.deleteStudent(Integer.valueOf(studentId));
			Alert backendAlert = StudentValidator.backendStudentValidator(result);
			if(backendAlert.getAlertType() == AlertType.CONFIRMATION)
			{
				showAllStudents();
				clearFields();
			}
			backendAlert.showAndWait();
		}
		else
		{
			frontendAlert.showAndWait();
		}
	}
	
	@FXML
	public void authorsPage(ActionEvent event) throws IOException {
		root = FXMLLoader.load(getClass().getResource("../presentation/Authors.fxml"));
		stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		scene = new Scene(root);
		stage.setScene(scene);
		stage.show();
	}
	
	@FXML
	public void booksPage(ActionEvent event) throws IOException {
		root = FXMLLoader.load(getClass().getResource("../presentation/Books.fxml"));
		stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		scene = new Scene(root);
		stage.setScene(scene);
		stage.show();
	}
	
	@FXML
	public void producersPage(ActionEvent event) throws IOException {
		root = FXMLLoader.load(getClass().getResource("../presentation/Producers.fxml"));
		stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		scene = new Scene(root);
		stage.setScene(scene);
		stage.show();
	}
	
	@FXML
	public void documentariesPage(ActionEvent event) throws IOException {
		root = FXMLLoader.load(getClass().getResource("../presentation/Documentaries.fxml"));
		stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		scene = new Scene(root);
		stage.setScene(scene);
		stage.show();
	}
	
	@FXML
	public void loansPage(ActionEvent event) throws IOException {
		root = FXMLLoader.load(getClass().getResource("../presentation/Loans.fxml"));
		stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		scene = new Scene(root);
		stage.setScene(scene);
		stage.show();
	}

}
